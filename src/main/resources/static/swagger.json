{
  "swagger": "2.0",
  "info": {
    "description": "RESTful API for Quickpoll",
    "version": "1.0",
    "title": "Quickpoll RESTful API",
    "termsOfService": "Terms of service",
    "contact": {
      "name": "Valeriia Lapytska",
      "url": "www.example.com",
      "email": "lerkasan@gmail.com"
    },
    "license": {
      "name": "License of API",
      "url": "API license URL"
    }
  },
  "host": "localhost:8080",
  "basePath": "/",
  "tags": [
    {
      "name": "compute-result-controller",
      "description": "Compute Result Controller"
    },
    {
      "name": "poll-controller",
      "description": "Poll Controller"
    },
    {
      "name": "vote-controller",
      "description": "Vote Controller"
    }
  ],
  "paths": {
    "/api/computeresult": {
      "get": {
        "tags": [
          "compute-result-controller"
        ],
        "summary": "View results of a poll with given pollId",
        "operationId": "computeResultUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "pollId",
            "in": "query",
            "description": "pollId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Poll results are shown gracefully",
            "schema": {
              "$ref": "#/definitions/VoteResult"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetails"
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/polls": {
      "get": {
        "tags": [
          "poll-controller"
        ],
        "summary": "List all polls",
        "operationId": "getAllPollsUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Poll"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "poll-controller"
        ],
        "summary": "Create a new poll",
        "description": "The URL of the created poll is returned in Location header",
        "operationId": "createPollUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "poll",
            "description": "poll",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Poll"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Poll"
            }
          },
          "201": {
            "description": "Poll was created gracefully",
            "schema": {
              "$ref": "#/definitions/Poll"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorDetails"
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/polls/{pollId}": {
      "get": {
        "tags": [
          "poll-controller"
        ],
        "summary": "Get info about a poll with given pollId",
        "operationId": "getPollUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "options[0].id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "options[0].value",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "question",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Poll info is shown gracefully",
            "schema": {
              "$ref": "#/definitions/Poll"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetails"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "poll-controller"
        ],
        "summary": "Update a poll with given pollId",
        "operationId": "updatePollUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "options[0].id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "options[0].value",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "poll",
            "description": "poll",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Poll"
            }
          },
          {
            "name": "question",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Poll"
            }
          },
          "202": {
            "description": "Poll was updated gracefully",
            "schema": {
              "$ref": "#/definitions/Poll"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorDetails"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetails"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "poll-controller"
        ],
        "summary": "Delete a poll with given pollId",
        "operationId": "deletePollUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "options[0].id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "options[0].value",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "question",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "204": {
            "description": "Poll was deleted gracefully",
            "schema": {
              "$ref": "#/definitions/ResponseEntity"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetails"
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/polls/{pollId}/votes": {
      "get": {
        "tags": [
          "vote-controller"
        ],
        "summary": "List all votes in a poll with given pollId",
        "operationId": "getAllVotesUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "options[0].id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "options[0].value",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "question",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Votes in a poll are shown gracefully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Vote"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetails"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "vote-controller"
        ],
        "summary": "Vote in a poll with given pollId",
        "description": "The URL of the created vote is returned in Location header",
        "operationId": "createVoteUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "options[0].id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "options[0].value",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "question",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "vote",
            "description": "vote",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Vote"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Vote"
            }
          },
          "201": {
            "description": "Vote was accepted gracefully",
            "schema": {
              "$ref": "#/definitions/Vote"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorDetails"
            }
          }
        },
        "deprecated": false
      }
    },
    "/api/polls/{pollId}/votes/{voteId}": {
      "get": {
        "tags": [
          "vote-controller"
        ],
        "summary": "Show info about a vote with given voteId",
        "operationId": "getVoteUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "voteId",
            "in": "path",
            "description": "voteId",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Vote info is shown gracefully",
            "schema": {
              "$ref": "#/definitions/Vote"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorDetails"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "ErrorDetails": {
      "type": "object",
      "properties": {
        "detail": {
          "type": "string"
        },
        "errors": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ValidationError"
            }
          }
        },
        "exceptionName": {
          "type": "string"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "type": "string"
        }
      },
      "title": "ErrorDetails"
    },
    "Iterable«Poll»": {
      "type": "object",
      "title": "Iterable«Poll»"
    },
    "Iterable«Vote»": {
      "type": "object",
      "title": "Iterable«Vote»"
    },
    "Option": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "Option"
    },
    "OptionCount": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "optionId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "OptionCount"
    },
    "Poll": {
      "type": "object",
      "required": [
        "options",
        "question"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Option"
          }
        },
        "question": {
          "type": "string"
        }
      },
      "title": "Poll"
    },
    "ResponseEntity": {
      "type": "object",
      "properties": {
        "body": {
          "type": "object"
        },
        "statusCode": {
          "type": "string",
          "enum": [
            "100 CONTINUE",
            "101 SWITCHING_PROTOCOLS",
            "102 PROCESSING",
            "103 CHECKPOINT",
            "200 OK",
            "201 CREATED",
            "202 ACCEPTED",
            "203 NON_AUTHORITATIVE_INFORMATION",
            "204 NO_CONTENT",
            "205 RESET_CONTENT",
            "206 PARTIAL_CONTENT",
            "207 MULTI_STATUS",
            "208 ALREADY_REPORTED",
            "226 IM_USED",
            "300 MULTIPLE_CHOICES",
            "301 MOVED_PERMANENTLY",
            "302 FOUND",
            "302 MOVED_TEMPORARILY",
            "303 SEE_OTHER",
            "304 NOT_MODIFIED",
            "305 USE_PROXY",
            "307 TEMPORARY_REDIRECT",
            "308 PERMANENT_REDIRECT",
            "400 BAD_REQUEST",
            "401 UNAUTHORIZED",
            "402 PAYMENT_REQUIRED",
            "403 FORBIDDEN",
            "404 NOT_FOUND",
            "405 METHOD_NOT_ALLOWED",
            "406 NOT_ACCEPTABLE",
            "407 PROXY_AUTHENTICATION_REQUIRED",
            "408 REQUEST_TIMEOUT",
            "409 CONFLICT",
            "410 GONE",
            "411 LENGTH_REQUIRED",
            "412 PRECONDITION_FAILED",
            "413 PAYLOAD_TOO_LARGE",
            "413 REQUEST_ENTITY_TOO_LARGE",
            "414 URI_TOO_LONG",
            "414 REQUEST_URI_TOO_LONG",
            "415 UNSUPPORTED_MEDIA_TYPE",
            "416 REQUESTED_RANGE_NOT_SATISFIABLE",
            "417 EXPECTATION_FAILED",
            "418 I_AM_A_TEAPOT",
            "419 INSUFFICIENT_SPACE_ON_RESOURCE",
            "420 METHOD_FAILURE",
            "421 DESTINATION_LOCKED",
            "422 UNPROCESSABLE_ENTITY",
            "423 LOCKED",
            "424 FAILED_DEPENDENCY",
            "426 UPGRADE_REQUIRED",
            "428 PRECONDITION_REQUIRED",
            "429 TOO_MANY_REQUESTS",
            "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
            "451 UNAVAILABLE_FOR_LEGAL_REASONS",
            "500 INTERNAL_SERVER_ERROR",
            "501 NOT_IMPLEMENTED",
            "502 BAD_GATEWAY",
            "503 SERVICE_UNAVAILABLE",
            "504 GATEWAY_TIMEOUT",
            "505 HTTP_VERSION_NOT_SUPPORTED",
            "506 VARIANT_ALSO_NEGOTIATES",
            "507 INSUFFICIENT_STORAGE",
            "508 LOOP_DETECTED",
            "509 BANDWIDTH_LIMIT_EXCEEDED",
            "510 NOT_EXTENDED",
            "511 NETWORK_AUTHENTICATION_REQUIRED"
          ]
        },
        "statusCodeValue": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "ResponseEntity"
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "ValidationError"
    },
    "Vote": {
      "type": "object",
      "required": [
        "option"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "option": {
          "$ref": "#/definitions/Option"
        }
      },
      "title": "Vote"
    },
    "VoteResult": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionCount"
          }
        },
        "totalVotes": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "VoteResult"
    }
  }
}